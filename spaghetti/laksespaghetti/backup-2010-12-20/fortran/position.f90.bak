module position

  use topography, only : sample_topo, rad
  use setup
  use tagdata, only : tag_depth, tag_temp
  use sst_module, only : sample_sst
  use time_module

  implicit none

  integer, parameter :: nFish = 10000   ! Number of particles
  real, dimension(nFish) :: Lon, Lat    ! lon, lat of particles
  integer, dimension(nFish) :: life     

contains

  !
  ! ==========================================
  ! 
  subroutine init_FW_position

    integer :: n

    do n = 1, nFish
      Lon(n) = lon0
      Lat(n) = lat0
      life(n) = 1
    end do

    ! --- Initiate the random number generator
    call random_seed()

  end subroutine init_FW_position
  
  ! ----------------------------------------

  subroutine init_BW_position

    integer :: n

    do n = 1, nFish
      Lon(n) = lon1
      Lat(n) = lat1
      life(n) = 1
    end do

    ! --- Initiate the random number generator
    !call random_seed()

  end subroutine init_BW_position

  !
  ! =========================================
  ! 

  ! Wrappers for forward/backward simulation
  subroutine movefishFW(timestep)
    integer, intent(in) :: timestep
    call movefish(timestep, lon1, lat1, 1)
  end subroutine movefishFW
  
  subroutine movefishBW(timestep)
    integer, intent(in) :: timestep
    call movefish(timestep, lon0, lat0, -1)
  end subroutine movefishBW

  !
  ! ------------------------------------------
  !  

  subroutine movefish(timestep, xtarget, ytarget, direction)

    integer, intent(in) :: timestep
    real, intent(in) :: xtarget
    real, intent(in) :: ytarget
    integer, intent(in) :: direction  ! +1 forw, -1 back

    real :: time

    real, parameter :: pi = 3.1415926
    real, parameter :: detlimit = 0.9
    real, parameter :: detlim2 = detlimit*detlimit
    real, parameter :: randspeed = 1.5
!    real, parameter :: randspeed = 1.4
!    real, parameter :: randspeed = 2.5 
!    real, parameter :: randspeed = 3.0 
!    real, parameter :: randspeed = 0.75 ! dt = 2 h => K = 2025)
     


!    logical, parameter :: use_temp = .FALSE.
    logical, parameter :: use_temp = .TRUE.

!    real, parameter :: stdfac  = 2.5   ! temperatur tolerance
!    real, parameter :: stdfac2 = 3.0   ! temperatur tolerance
    real, parameter :: stdfac  = 0.8  ! temperatur tolerance
    real, parameter :: stdfac2 = 1.0  ! temperatur tolerance
!    real, parameter :: stdfac  = 3.0  ! temperatur tolerance
!    real, parameter :: stdfac2 = 3.5  ! temperatur tolerance

!    real, parameter :: dfac = 1000.0
    real, parameter :: dfac = 1.3
!    real, parameter :: dfac = 1.4
    real, parameter :: add_depth = 0.0
!    real, parameter :: add_depth = 25.0
      ! Detph adjustment factor

!    real :: Xdet, Ydet
!    real :: Norm
    real :: Udet, Vdet      ! Deterministic velocity   [m/s]
    real :: Urand, Vrand    ! Random velocity          [m/s]
    real :: Xnew, Ynew
    integer :: n            ! Particle counter
!    real :: deltaX, deltaY
    real :: lonfac          ! Adjustment for map distortion
    real :: a, angle        ! Uniform random number and angle
    integer :: i,j
    integer :: month
    real :: atemp, astd
    logical :: tempOK, depthOK
    integer :: tstep 

    real :: H, sst, err
    type(time_type) :: date
    integer, dimension(6) :: dvec

    ! running time [days]
    time = real(timestep) / outper

    !print *, timestep, time, tag_depth(timestep)
    if (direction < 0)  then
      tstep = simdays*outper + 1 - timestep
      date = stop_time - time
    else
      tstep = timestep
      date = start_time + time
    end if
    call time2vec(dvec, date)
    !month = dvec(2)
    !day   = dvec(3)


    !print *, "time = ", time, tstep


    do n = 1, nFish
      if (life(n) == 1) then  ! Only consider active fish


       lonfac = cos(Lat(n)*rad)

       ! 
       ! Compute deterministic velocity
       ! the velocity that would take the particle to the
       ! catch position in the remaining time
       !   
       Udet = (xtarget-Lon(n))*lonfac*1852*60/ ((simdays-time)*86400)
       Vdet = (ytarget-Lat(n))*1852*60 / ((simdays-time)*86400)
       if ((Udet*Udet + Vdet*Vdet) > detlim2) then
         ! Fish cannot reach target in time, terminate !!!
         life(n) = 0
         cycle         ! Continue with next fish
       end if

         
       ! Random component
       ! (bør restrisere hastighet etter hvor stor del den deterministiske er
       call random_number(a)
       angle = 2*pi*a
       Urand = randspeed * cos(angle)
       Vrand = randspeed * sin(angle)

       !if ((n == 100) .or. (n==1)) then
        !print *, "detVel = ",   sqrt(Udet*Udet + Vdet*Vdet)
        ! print *, "Udet, Vdet", Udet, Vdet
        !print *, "Urand, Vrand = ", Urand, Vrand
       ! print *, ytarget, Lat(n)
       ! print *, xtarget, Lon(n)
       !end if

       ! Update positions (OBS, dt er i minutter, forkortes)
       Xnew = Lon(n) + (Udet + Urand)*dt/(1852*lonfac)
       Ynew = Lat(n) + (Vdet + Vrand)*dt/1852

       ! New depth
       call sample_topo(Xnew, Ynew, H)
       !if (n == 1) then
       !  print *, "--------------"
       !  print *, Lon(n), Lat(n)
       !  print *, Xnew, Ynew
       !  print *, "H = ", H
       !  print *, "tag_depth = ", tag_depth(tstep)
       !  print *, Udet, Urand
       !end if

      
       ! Depth check
       depthOK = .true.
       if ((tag_depth(tstep) > 1.2*H + 30.0) .and. (tag_depth(tstep) < 5000)) then
         depthOK = .false.
       end if
       ! Check land
       if (H < 0) then
          depthOK = .false.
       end if
       !depthOK = .True.


       call sample_sst(Xnew, Ynew, dvec(2), dvec(3), sst, err)

       tempOK = .True.
       if ((tag_temp(tstep) < 500.0) .and. (abs(tag_temp(tstep) - sst) > 0.0)) then
          tempOK = .False.
       end if
       tempOK = .False.


       !if (n == 1) then
       !   print *, "depthOK = ", depthOK
       !   print *, "tempOK = ", tempOK
       !end if
      
       if ( depthOK .and. tempOK) then

         ! New position OK, update
         Lon(n) = Xnew
         Lat(n) = Ynew

       else if (.not. depthOK) then! New position does not work

          ! on land, get new chance
          if (H < 0) then
             depthOK = .true.
             tempOK = .true.
          else
             ! check old position
             call sample_topo(Lon(n), Lat(n), H)
             ! and give some slack
             if ( tag_depth(tstep) < 1.1*H + 20 ) then 
                depthOK = .true.
             else
                depthOK = .false.
             end if
           end if

          
          ! old position not OK, terminate
          if (.not. (depthOK .and. tempOK)) then
            life(n) = 0
          end if
       

       end if ! (depth OK


      end if ! life(n)
    end do ! n


    ! Count the number of living fish
    !print *, "movefish: finished, number of living fish = ", sum(life)      

  end subroutine movefish




end module position
